/***
 *    ██████╗ ███████╗███████╗████████╗██████╗ ██╗ ██████╗████████╗
 *    ██╔══██╗██╔════╝██╔════╝╚══██╔══╝██╔══██╗██║██╔════╝╚══██╔══╝
 *    ██████╔╝█████╗  ███████╗   ██║   ██████╔╝██║██║        ██║
 *    ██╔══██╗██╔══╝  ╚════██║   ██║   ██╔══██╗██║██║        ██║
 *    ██║  ██║███████╗███████║   ██║   ██║  ██║██║╚██████╗   ██║
 *    ╚═╝  ╚═╝╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝ ╚═════╝   ╚═╝
 *
 *    ██╗███╗   ██╗██████╗ ██╗   ██╗████████╗
 *    ██║████╗  ██║██╔══██╗██║   ██║╚══██╔══╝
 *    ██║██╔██╗ ██║██████╔╝██║   ██║   ██║
 *    ██║██║╚██╗██║██╔═══╝ ██║   ██║   ██║
 *    ██║██║ ╚████║██║     ╚██████╔╝   ██║
 *    ╚═╝╚═╝  ╚═══╝╚═╝      ╚═════╝    ╚═╝
 *
 *    ██████╗ ██╗██████╗ ███████╗ ██████╗████████╗██╗██╗   ██╗███████╗
 *    ██╔══██╗██║██╔══██╗██╔════╝██╔════╝╚══██╔══╝██║██║   ██║██╔════╝
 *    ██║  ██║██║██████╔╝█████╗  ██║        ██║   ██║██║   ██║█████╗
 *    ██║  ██║██║██╔══██╗██╔══╝  ██║        ██║   ██║╚██╗ ██╔╝██╔══╝
 *    ██████╔╝██║██║  ██║███████╗╚██████╗   ██║   ██║ ╚████╔╝ ███████╗
 *    ╚═════╝ ╚═╝╚═╝  ╚═╝╚══════╝ ╚═════╝   ╚═╝   ╚═╝  ╚═══╝  ╚══════╝
 *
 */
import {
  Directive,
  ElementRef,
  Input
} from '@angular/core';
import * as inputMask from 'inputmask';

@Directive({
  selector: '[fgRestrictInput]'
})
export class RestrictInputDirective {

/***
 *    ┌─┐┬─┐┌─┐┌─┐┌─┐┬─┐┌┬┐┬┌─┐┌─┐
 *    ├─┘├┬┘│ │├─┘├┤ ├┬┘ │ │├┤ └─┐
 *    ┴  ┴└─└─┘┴  └─┘┴└─ ┴ ┴└─┘└─┘
 */
  private _regexMap = {
    integer: '^[-]?[0-9]*$',
    float: '^[-]?([0-9]*[.])?[0-9]+$',
    words: '([A-z]*\\s)*',
    names: '(([A-Z]){1}([a-z]){1,}\\s)*',
    point25: '^\-?[0-9]*(?:\\.25|\\.50|\\.75|)$',
  };

  @Input('fgRestrictInput')
  public set defineInputType(type: string) {
    switch (type) {
      case 'phone':
        inputMask('[+9]9.999.999.999', { placeholder: '_'})
          .mask(this._elementRef.nativeElement);
        break;
      case 'time':
        inputMask({regex: '([0-1][0-9])|([2][0-3]):[0-5][0-9]'})
          .mask(this._elementRef.nativeElement);
        break;
      default:
        inputMask({regex: this._regexMap[type], placeholder: ''})
          .mask(this._elementRef.nativeElement);
    }
  }

/***
 *    ┌─┐┌─┐┌┐┌┌─┐┌┬┐┬─┐┬ ┬┌─┐┌┬┐┌─┐┬─┐
 *    │  │ ││││└─┐ │ ├┬┘│ ││   │ │ │├┬┘
 *    └─┘└─┘┘└┘└─┘ ┴ ┴└─└─┘└─┘ ┴ └─┘┴└─
 */
  constructor(private _elementRef: ElementRef) { }

}
